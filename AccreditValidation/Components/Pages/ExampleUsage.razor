@page "/example"
@using AccreditValidation.Components.Services.Interface
@using AccreditValidation.Shared.Services.Notification
@using AccreditValidation.Components.Base.Notification
@using System.Collections.ObjectModel
@inject INotificationService NotificationService

<div class="page">
    <div class="header">
        <h1>Notification Example</h1>
        
        <!-- Notification Bell Component -->
        <NotificationBellComponent @ref="notificationBell" />
    </div>

    <div class="content">
        <button @onclick="SendInfoNotification">Send Info</button>
        <button @onclick="SendSuccessNotification">Send Success</button>
        <button @onclick="SendWarningNotification">Send Warning</button>
        <button @onclick="SendErrorNotification">Send Error</button>
    </div>
</div>

@code {
    private NotificationBellComponent? notificationBell;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to notification events
        NotificationService.OnNotificationReceived += OnNotificationReceived;
        
        // Request permission
        await NotificationService.RequestPermissionAsync();
    }

    private void OnNotificationReceived(object? sender, InAppNotificationService notification)
    {
        // Update the notification bell
        InvokeAsync(StateHasChanged);
    }

    private async Task SendInfoNotification()
    {
        await NotificationService.ShowInAppNotificationAsync(
            "Information",
            "This is an informational message",
            NotificationType.Info);
    }

    private async Task SendSuccessNotification()
    {
        await NotificationService.ShowInAppNotificationAsync(
            "Success",
            "Operation completed successfully!",
            NotificationType.Success);
    }

    private async Task SendWarningNotification()
    {
        await NotificationService.ShowInAppNotificationAsync(
            "Warning",
            "Please review this important information",
            NotificationType.Warning);
    }

    private async Task SendErrorNotification()
    {
        await NotificationService.ShowInAppNotificationAsync(
            "Error",
            "An error occurred during the operation",
            NotificationType.Error);
    }

    public void Dispose()
    {
        NotificationService.OnNotificationReceived -= OnNotificationReceived;
    }
}